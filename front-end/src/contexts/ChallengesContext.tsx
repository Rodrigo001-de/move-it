import { createContext, useState, ReactNode, useEffect } from 'react';
import Cookies from 'js-cookie';
import challenges from '../../challenges.json';

// o contexto √© utilizado para passar informa√ß√µes de um componente para outro
// nesse caso estou utilizando o Context API do React.
// contexto √© uma forma de ter acesso a um informa√ß√£o de diversos lugares

interface Challenge {
  type: 'body' | 'eye'; // o valor do type ou √© body ou √© eye
  description: string;
  amount: number;
}

interface ChallengesContextData {
  level: number;
  currentExperience: number;
  experienceToNextLevel: number;
  challengesCompleted: number;
  activeChallenge: Challenge
  levelUp: () => void;
  startNewChallenge: () => void;
  resetChallenge: () => void;
  completeChallenge: () => void;
};

interface ChallengesProviderProps {
  // o ReactNode vai aceitar qualquer elemento filho como children
  children: ReactNode;
};

export const ChallengesContext = createContext({} as ChallengesContextData);

export function ChallengesProvider({ children }: ChallengesProviderProps) {
  const [level, setLevel] = useState(1);
  const [currentExperience, setCurrentExperience] = useState(0);
  const [challengesCompleted, setChallengesCompleted] = useState(0);

  const [activeChallenge, setActiveChallenge] = useState(null);

  // o math.pow vai fazer um calculo em pot√™ncia.
  // vai ser um calculo na pot√™ncia 2 e level + 1 porque eu queor saber o proximo
  // level vezes 4, o quetro √© o fator de experi√™ncia que pode aumentar ou 
  // diminuir basiado se vai deixar mais dif√≠cil ou mais fac√≠l
  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);

  // quando passa um array vazio no useEffect ele vai executar a fun√ß√£o uma 
  // unica vez quando o componente for exibido em tela
  useEffect(() => {
    // pedeindo permiss√£o para mostrar notifica√ß√µes
    Notification.requestPermission();
  }, []);

  useEffect(() => {
    // estou salvando o level dentro dos cookies e como ele s√≥ aceita String e o
    // level √© um Number eu estou convertendo ele para String
    Cookies.set('level', String(level));
    //salvando a experi√™ncia atual do usu√°rio nos cookies
    Cookies.set('currentExperience', String(currentExperience));
    // salvando os desafios concluidos do usu√°rio nos cookies
    Cookies.set('challengesCompleted', String(challengesCompleted));
    // eu estou colocando essas tr√™s informa√ß√µes no array de depend√™ncias do 
    // useEffect porque eu quero disparar uma fun√ß√£o assim que esses valores
    // mudarem e salvar eles no cookies
  }, [level, currentExperience, challengesCompleted]);

  function levelUp() {
    setLevel(level + 1)
  };

  function startNewChallenge() {
    // o Math.floor √© para arredondar os n√∫meros para baixo.
    // para gerar um n√∫mero aleat√≥rio de 0 a 1 utiliza o Math.random()
    // mas para gerar qualquer n√∫mero aleat√≥rio eu preciso falar o que √© esse
    // aleat√≥rio(* challenges.length) e nesse caso √© o n√∫mero de chanllenges
    // que eu tenho no arquivo json chanllenges.json
    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);
    // agora e tenho o desafio dentro do chanllenge
    const challenge = challenges[randomChallengeIndex];

    setActiveChallenge(challenge);

    // executando o audio de notifica√ß√£o
    new Audio('/notification.mp3').play();

    // se o usu√°rio deu permiss√µes para eu enviar notifica√ß√µes para ele 
    if (Notification.permission === 'granted') {
      new Notification('Novo desafio üí™', {
        body: `Valendo ${challenge.amount}xp!`
      });
    };
  };

  function resetChallenge() {
    // quado o usu√°rio falhar no desafio
    setActiveChallenge(null);
  };

  function completeChallenge() {
    // essa fun√ß√£o n√£o pode ser chamada se o usu√°rio se o usu√°rio n√£o tiver com
    // um chanllenge ativo por isso est√° fazendo a valida√ß√£o se n√£o est√° com 
    // chanllenge ativo ent√£o retorne nada
    if (!activeChallenge) {
      return;
    }

    // estou pegando a quantidade de experi√™ncia que o desafio d√°
    const { amount } = activeChallenge;

    // estou somando a experi√™ncia atual do usu√°rio com o valor de experi√™ncia
    // que o desafio d√°
    let finalExperience = currentExperience + amount;

    // se o valor final de experi√™ncia for maior ou igual a experi√™ncia que o 
    // usu√°rio precisa para passar de level, eu vou upar o usu√°riode
    // level(levelUp()) e vou falar que a experi√™ncia final do usu√°rio √© igual
    // ao total que ele ficou no final menos a quantidade de experi√™ncia que ele
    // precisava para passar de level
    if (finalExperience >= experienceToNextLevel) {
      finalExperience = finalExperience - experienceToNextLevel;
      levelUp();
    }

    setCurrentExperience(finalExperience);
    setActiveChallenge(null);
    // atualizando o numero de desafios completados
    setChallengesCompleted(challengesCompleted + 1);
  };

  return (
    // o  ChallengesContext.Provider vai fazer com que todos os elementos
    // dentro do provider v√£o ter acesso aos dados daquele contexto, todos os
    // dados que for armazenados dentro do contexto, ou seja, toda a minha
    // aplica√ß√£o vai ter acesso ao contexto de ChallengesContext
    // o Provider recebe um a propriedade chamada value que √© o que eu quero
    // enviar de informa√ß√£o 

    <ChallengesContext.Provider 
      value={{ 
        level, 
        currentExperience,
        experienceToNextLevel,
        challengesCompleted,
        activeChallenge,
        levelUp,
        startNewChallenge,
        resetChallenge,
        completeChallenge
      }}
    >
      {children}
    </ChallengesContext.Provider>
  );
};